# -*- coding: utf-8 -*-
"""Anand Sir(08-August)(CNN).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hSy-qhkwwmUZ3LrIDklv1GI0OaIa46oz
"""

!pip install opendatasets

import opendatasets as od

od.download("https://www.kaggle.com/datasets/salader/dogs-vs-cats")

train_df="/content/dogs-vs-cats/train"
test_df="/content/dogs-vs-cats/test"

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# DEEP LEARNING LIBRARIES

"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential #ouput of first columns will be the output of second column
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout

"""# Load Training Data"""

train_data=keras.utils.image_dataset_from_directory(
    directory=train_df,
    labels="inferred",    #folder name cats dogs
    label_mode="int",     # 0,1
    batch_size=32,        # image will be process
    image_size=(256,256)  # resize of image
)

"""# Load Test Data"""

test_df=keras.utils.image_dataset_from_directory(
    directory=test_df,
    labels="inferred",    #folder name cats dogs
    label_mode="int",     # 0,1
    batch_size=32,        # image will be process
    image_size=(256,256)  # resize of image
)

def process(image,label):
  image=tf.cast(image/255.0 ,tf.float32)
  return image,label

train_data=train_data.map(process)
test_data=test_df.map(process)

model=Sequential()   #layer by layer

"""# Low Level Extraxtion
# conv2D: extraxt feature line,edge
"""

#padding : border
#3: RGB in input_Size
model.add(Conv2D(32,kernel_size=(3,3),padding="valid",activation="relu",input_shape=(256,256,3)))

#Maxpooling 2D
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding="valid"))

"""#Mid Level Extraction"""

model.add(Conv2D(64,kernel_size=(3,3),padding="valid",activation="relu"))

#MAXPOOLING_2D
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding="valid"))

"""#High Level Extraction"""

model.add(Conv2D(128,kernel_size=(3,3),padding="valid",activation="relu"))

#MAXPOOLING_2D
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding="valid"))

"""# Convert 2D to 1D"""

model.add(Flatten())

"""#Dense Layer with DropOut"""

model.add(Dense(128,activation="relu"))
model.add(Dropout(0.1))
model.add(Dense(64,activation="relu"))
model.add(Dropout(0.1))
#Binary Classification for Cat / Dog
model.add(Dense(1,activation="sigmoid"))

model.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])

history=model.fit(train_data,epochs=5,validation_data=test_data)

history.history.keys()

plt.plot(history.history["accuracy"],label='train')
plt.plot(history.history["val_accuracy"],label='test')
plt.legend()
plt.show()

img_path="/content/dogs-vs-cats/test/dogs/dog.10014.jpg"

img=keras.utils.load_img(img_path,target_size=(256,256))
#Convert to Array
input_arr=keras.utils.img_to_array(img)
#expanf dim to convert batch shape
input_arr=np.expand_dims(input_arr,axis=0)

prob = model.predict(input_arr)[0][0]
print(f"Probability : {prob}")

pred_class=1 if prob>0.5 else 0
print(f"Predicted Class : {pred_class}")

plt.imshow(img)
plt.axis('off')
plt.title(f"Predicted Class : {'dog' if pred_class==1 else 'cat'} (Probability: {prob:.2f})")
plt.show()

img_path="/content/dogs-vs-cats/test/cats/cat.10194.jpg"

img=keras.utils.load_img(img_path,target_size=(256,256))
#Convert to Array
input_arr=keras.utils.img_to_array(img)
#expanf dim to convert batch shape
input_arr=np.expand_dims(input_arr,axis=0)

prob = model.predict(input_arr)[0][0]
print(f"Probability : {prob}")

pred_class=1 if prob>0.5 else 0
print(f"Predicted Class : {pred_class}")

plt.imshow(img)
plt.axis('off')
plt.title(f"Predicted Class : {'dog' if pred_class==1 else 'cat'} (Probability: {prob:.2f})")
plt.show()

